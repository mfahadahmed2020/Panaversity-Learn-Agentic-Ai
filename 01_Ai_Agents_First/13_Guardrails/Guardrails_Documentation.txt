  Guardrails_Documentation

  https://openai.github.io/openai-agents-python/guardrails/

  Guardrails run in parallel to your agents, enabling you to do checks and validations of user input. For example, imagine you have an agent that uses a very smart (and hence slow/expensive) model to help with customer requests. You wouldn't want malicious users to ask the model to help them with their math homework. So, you can run a guardrail with a fast/cheap model. If the guardrail detects malicious usage, it can immediately raise an error, which stops the expensive model from running and saves you time/money.

  There are two kinds of guardrails:

    Input guardrails run on the initial user input
    Output guardrails run on the final agent output

  Input guardrails

  Input guardrails run in 3 steps:

    First, the guardrail receives the same input passed to the agent.
    Next, the guardrail function runs to produce a GuardrailFunctionOutput, which is then wrapped in an InputGuardrailResult
    Finally, we check if .tripwire_triggered is true. If true, an InputGuardrailTripwireTriggered exception is raised, so you can appropriately respond to the user or handle the exception.

  Note

  Input guardrails are intended to run on user input, so an agent's guardrails only run if the agent is the first agent. You might wonder, why is the guardrails property on the agent instead of passed to Runner.run? It's because guardrails tend to be related to the actual Agent - you'd run different guardrails for different agents, so colocating the code is useful for readability.
  Output guardrails

  Output guardrails run in 3 steps:

    First, the guardrail receives the output produced by the agent.
    Next, the guardrail function runs to produce a GuardrailFunctionOutput, which is then wrapped in an OutputGuardrailResult
    Finally, we check if .tripwire_triggered is true. If true, an OutputGuardrailTripwireTriggered exception is raised, so you can appropriately respond to the user or handle the exception.

  Note

  Output guardrails are intended to run on the final agent output, so an agent's guardrails only run if the agent is the last agent. Similar to the input guardrails, we do this because guardrails tend to be related to the actual Agent - you'd run different guardrails for different agents, so colocating the code is useful for readability.
  Tripwires

  If the input or output fails the guardrail, the Guardrail can signal this with a tripwire. As soon as we see a guardrail that has triggered the tripwires, we immediately raise a {Input,Output}GuardrailTripwireTriggered exception and halt the Agent execution.
  Implementing a guardrail

  You need to provide a function that receives input, and returns a GuardrailFunctionOutput. In this example, we'll do this by running an Agent under the hood.

  Output guardrails are similar.


   GuardrailFunctionOutput dataclass

  The output of a guardrail function.
  Source code in src/agents/guardrail.py

  output_info instance-attribute

  output_info: Any

  Optional information about the guardrail's output. For example, the guardrail could include information about the checks it performed and granular results.
  tripwire_triggered instance-attribute

  tripwire_triggered: bool

  Whether the tripwire was triggered. If triggered, the agent's execution will be halted.
  InputGuardrailResult dataclass

  The result of a guardrail run.
  Source code in src/agents/guardrail.py

  guardrail instance-attribute

  guardrail: InputGuardrail[Any]

  The guardrail that was run.
  output instance-attribute

  output: GuardrailFunctionOutput

  The output of the guardrail function.
  OutputGuardrailResult dataclass

  The result of a guardrail run.
  Source code in src/agents/guardrail.py

  guardrail instance-attribute

  guardrail: OutputGuardrail[Any]

  The guardrail that was run.
  agent_output instance-attribute

  agent_output: Any

  The output of the agent that was checked by the guardrail.
  agent instance-attribute

  agent: Agent[Any]

  The agent that was checked by the guardrail.
  output instance-attribute

  output: GuardrailFunctionOutput

  The output of the guardrail function.
  InputGuardrail dataclass

  Bases: Generic[TContext]

  Input guardrails are checks that run in parallel to the agent's execution. They can be used to do things like: - Check if input messages are off-topic - Take over control of the agent's execution if an unexpected input is detected

  You can use the @input_guardrail() decorator to turn a function into an InputGuardrail, or create an InputGuardrail manually.

  Guardrails return a GuardrailResult. If result.tripwire_triggered is True, the agent's execution will immediately stop, and an InputGuardrailTripwireTriggered exception will be raised
  Source code in src/agents/guardrail.py

  guardrail_function instance-attribute

  guardrail_function: Callable[
    [
        RunContextWrapper[TContext],
        Agent[Any],
        str | list[TResponseInputItem],
    ],
    MaybeAwaitable[GuardrailFunctionOutput],
  ]

  A function that receives the agent input and the context, and returns a GuardrailResult. The result marks whether the tripwire was triggered, and can optionally include information about the guardrail's output.
  name class-attribute instance-attribute

  name: str | None = None

  The name of the guardrail, used for tracing. If not provided, we'll use the guardrail function's name.
  OutputGuardrail dataclass

  Bases: Generic[TContext]

  Output guardrails are checks that run on the final output of an agent. They can be used to do check if the output passes certain validation criteria

  You can use the @output_guardrail() decorator to turn a function into an OutputGuardrail, or create an OutputGuardrail manually.

  Guardrails return a GuardrailResult. If result.tripwire_triggered is True, an OutputGuardrailTripwireTriggered exception will be raised.
  Source code in src/agents/guardrail.py

  guardrail_function instance-attribute

  guardrail_function: Callable[
    [RunContextWrapper[TContext], Agent[Any], Any],
    MaybeAwaitable[GuardrailFunctionOutput],
  ]

  A function that receives the final agent, its output, and the context, and returns a GuardrailResult. The result marks whether the tripwire was triggered, and can optionally include information about the guardrail's output.
  name class-attribute instance-attribute

  name: str | None = None

  The name of the guardrail, used for tracing. If not provided, we'll use the guardrail function's name.
  input_guardrail

  input_guardrail(
    func: _InputGuardrailFuncSync[TContext_co],
  ) -> InputGuardrail[TContext_co]

  input_guardrail(
    func: _InputGuardrailFuncAsync[TContext_co],
  ) -> InputGuardrail[TContext_co]

  input_guardrail(
    *, name: str | None = None
  ) -> Callable[
    [
        _InputGuardrailFuncSync[TContext_co]
        | _InputGuardrailFuncAsync[TContext_co]
    ],
    InputGuardrail[TContext_co],
  ]

  input_guardrail(
    func: _InputGuardrailFuncSync[TContext_co]
    | _InputGuardrailFuncAsync[TContext_co]
    | None = None,
    *,
    name: str | None = None,
  ) -> (
    InputGuardrail[TContext_co]
    | Callable[
        [
            _InputGuardrailFuncSync[TContext_co]
            | _InputGuardrailFuncAsync[TContext_co]
        ],
        InputGuardrail[TContext_co],
    ]
  )

  Decorator that transforms a sync or async function into an InputGuardrail. It can be used directly (no parentheses) or with keyword args, e.g.:

  @input_guardrail
  def my_sync_guardrail(...): ...

  @input_guardrail(name="guardrail_name")
  async def my_async_guardrail(...): ...

  Source code in src/agents/guardrail.py

  output_guardrail

  output_guardrail(
    func: _OutputGuardrailFuncSync[TContext_co],
  ) -> OutputGuardrail[TContext_co]

  output_guardrail(
    func: _OutputGuardrailFuncAsync[TContext_co],
  ) -> OutputGuardrail[TContext_co]

  output_guardrail(
    *, name: str | None = None
  ) -> Callable[
    [
        _OutputGuardrailFuncSync[TContext_co]
        | _OutputGuardrailFuncAsync[TContext_co]
    ],
    OutputGuardrail[TContext_co],
]

  output_guardrail(
    func: _OutputGuardrailFuncSync[TContext_co]
    | _OutputGuardrailFuncAsync[TContext_co]
    | None = None,
    *,
    name: str | None = None,
) -> (
    OutputGuardrail[TContext_co]
    | Callable[
        [
            _OutputGuardrailFuncSync[TContext_co]
            | _OutputGuardrailFuncAsync[TContext_co]
        ],
        OutputGuardrail[TContext_co],
    ]
)

Decorator that transforms a sync or async function into an OutputGuardrail. It can be used directly (no parentheses) or with keyword args, e.g.:

@output_guardrail
def my_sync_guardrail(...): ...

@output_guardrail(name="guardrail_name")
async def my_async_guardrail(...): ...

Source code in src/agents/guardrail.py

def output_guardrail(
    func: _OutputGuardrailFuncSync[TContext_co]
    | _OutputGuardrailFuncAsync[TContext_co]
    | None = None,
    *,
    name: str | None = None,
) -> (
    OutputGuardrail[TContext_co]
    | Callable[
        [_OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co]],
        OutputGuardrail[TContext_co],
    ]
):
    """
    Decorator that transforms a sync or async function into an `OutputGuardrail`.
    It can be used directly (no parentheses) or with keyword args, e.g.:

        @output_guardrail
        def my_sync_guardrail(...): ...

        @output_guardrail(name="guardrail_name")
        async def my_async_guardrail(...): ...
    """

    def decorator(
        f: _OutputGuardrailFuncSync[TContext_co] | _OutputGuardrailFuncAsync[TContext_co],
    ) -> OutputGuardrail[TContext_co]:
        return OutputGuardrail(
            guardrail_function=f,
            # Guardrail name defaults to function's name when not specified (None).
            name=name if name else f.__name__,
        )

    if func is not None:
        # Decorator was used without parentheses
        return decorator(func)

    # Decorator used with keyword arguments
    return decorator
